---
- hosts: routers_shell
  gather_facts: no
  become: yes

  vars:
    connect_vars:
       host: "{{ ansible_host }}"
       username: "{{ ansible_user }}"
       password: "{{ ansible_ssh_pass }}"
    up: "sudo -i /misc/app_host/launch_openr_{{ inventory_hostname }}.sh"
    down: "sudo -i docker rm -f openr"

  tasks:

  - name: Copy docker sysconfig file to rtr
    copy:
      src: "{{ docker_sysconfig_file }}"
      dest: "/etc/sysconfig/docker"
      owner: root
      group: root
      mode: a+x

  # Pause for 5 minutes to build app cache.
  - name: Pause the playbook for about 45 seconds as docker daemon restarts due to sysconfig change
    pause:
      seconds: 45


  - name: Copy run_openr script to rtr
    copy:
      src: "{{ run_openr_script }}"
      dest: "/misc/app_host/"
      owner: root 
      group: root 
      mode: a+x 
  - name: Copy hosts_r file to rtr
    copy:
      src: "{{ hosts_r }}"
      dest: "/misc/app_host/"
      owner: root 
      group: root 
      mode: a+x 

  - name: Copy launch_openr script to rtr
    copy:
      src: "{{ launch_openr_script }}"
      dest: "/misc/app_host/"
      owner: root 
      group: root 
      mode: a+x 

  - name: Copy increment_ipv4 script to rtr
    copy:
      src: "{{ increment_ipv4_prefix }}"
      dest: "/misc/app_host/"
      owner: root 
      group: root 
      mode: a+x 

  - name: Copy cron file to rtr (CSCvh76067)
    copy:
      src: "{{ cron_file }}"
      dest: "/misc/app_host/ipv6_fe80_route_append.sh"
      owner: root
      group: root
      mode: a+x

  - name: Set up Cronjob (CSCvh76067)
    cron:
      name: set up ipv6 fe80::/64 routes 
      weekday: "*"
      minute: "*"
      hour: "*"
      user: root
      job: "/misc/app_host/ipv6_fe80_route_append.sh"
      cron_file: ansible_ipv6_fe80_route_append


  - name: Check docker container is running
    shell: sudo -i docker inspect --format={{ '{{.State.Running}}' }}  openr
    args:
      executable: /bin/bash
    register: status
    ignore_errors: yes
  - debug: var=output.stdout_lines

 
  - name: Clean up docker container if running 
    shell: "{{ down }}"
    args:
      executable: /bin/bash
    register: output
    when: status.stdout == "true"
  - debug: var=output.stdout_lines


  - name: Bring up the docker container 
    shell: "{{ up }}"
    args:
      executable: /bin/bash
    register: output
    ignore_errors: yes
  - debug: var=output.stdout_lines  
